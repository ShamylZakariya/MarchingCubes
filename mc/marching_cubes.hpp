//
//  marching_cubes.hpp
//  MarchingCubes
//
//  Created by Shamyl Zakariya on 11/25/19.
//  Copyright Â© 2019 Shamyl Zakariya. All rights reserved.
//

#ifndef marching_cubes_hpp
#define marching_cubes_hpp

#include <functional>

#include "triangle_consumer.hpp"
#include "util/util.hpp"

namespace mc {

struct MaterialState {
    glm::vec4 color { 1 };
    float shininess { 0 };
    float texture0 { 0 };
    float texture1 { 0 };
};

typedef std::function<float(const glm::vec3& p, MaterialState&)> IsoSurfaceValueFunction;

/**
 * The Vertex type generated by the marching cubes algorithm
 */
struct Vertex {
    glm::vec3 pos;
    glm::vec4 color { 1 };
    glm::vec3 triangleNormal { 0, 1, 0 };
    float shininess {0};
    float texture0{0};
    float texture1{0};

    enum class AttributeLayout : GLuint {
        Pos = 0,
        Color = 1,
        TriangleNormal = 2,
        Shininess = 3,
        Texture0 = 4,
        Texture1 = 5
    };

    static void bindVertexAttributes();
};

//
// Marching
//

/*
 March region of a volume passing generated triangles into triangleConsumer
 region: The subregion to march
 valueSampler: source of isosurface values
 normalSampler: if provided, will be used to compute per-vertex surface normals. if null,
    each vertex will receive the normal of the triangle it is a part of
 triangleConsumer: Receives each generated triangle
 */
void march(util::iAABB region,
    IsoSurfaceValueFunction valueSampler,
    TriangleConsumer<Vertex>& triangleConsumer);

}

#endif /* marching_cubes_hpp */
